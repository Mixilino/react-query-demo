/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseQueryRouteImport } from './routes/use-query'
import { Route as UseMutationRouteImport } from './routes/use-mutation'
import { Route as PaginationRouteImport } from './routes/pagination'
import { Route as InfiniteQueryRouteImport } from './routes/infinite-query'
import { Route as CleanArchitectureRouteImport } from './routes/clean-architecture'
import { Route as CacheStaleTimeRouteImport } from './routes/cache-stale-time'
import { Route as IndexRouteImport } from './routes/index'

const UseQueryRoute = UseQueryRouteImport.update({
  id: '/use-query',
  path: '/use-query',
  getParentRoute: () => rootRouteImport,
} as any)
const UseMutationRoute = UseMutationRouteImport.update({
  id: '/use-mutation',
  path: '/use-mutation',
  getParentRoute: () => rootRouteImport,
} as any)
const PaginationRoute = PaginationRouteImport.update({
  id: '/pagination',
  path: '/pagination',
  getParentRoute: () => rootRouteImport,
} as any)
const InfiniteQueryRoute = InfiniteQueryRouteImport.update({
  id: '/infinite-query',
  path: '/infinite-query',
  getParentRoute: () => rootRouteImport,
} as any)
const CleanArchitectureRoute = CleanArchitectureRouteImport.update({
  id: '/clean-architecture',
  path: '/clean-architecture',
  getParentRoute: () => rootRouteImport,
} as any)
const CacheStaleTimeRoute = CacheStaleTimeRouteImport.update({
  id: '/cache-stale-time',
  path: '/cache-stale-time',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cache-stale-time': typeof CacheStaleTimeRoute
  '/clean-architecture': typeof CleanArchitectureRoute
  '/infinite-query': typeof InfiniteQueryRoute
  '/pagination': typeof PaginationRoute
  '/use-mutation': typeof UseMutationRoute
  '/use-query': typeof UseQueryRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cache-stale-time': typeof CacheStaleTimeRoute
  '/clean-architecture': typeof CleanArchitectureRoute
  '/infinite-query': typeof InfiniteQueryRoute
  '/pagination': typeof PaginationRoute
  '/use-mutation': typeof UseMutationRoute
  '/use-query': typeof UseQueryRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cache-stale-time': typeof CacheStaleTimeRoute
  '/clean-architecture': typeof CleanArchitectureRoute
  '/infinite-query': typeof InfiniteQueryRoute
  '/pagination': typeof PaginationRoute
  '/use-mutation': typeof UseMutationRoute
  '/use-query': typeof UseQueryRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/cache-stale-time'
    | '/clean-architecture'
    | '/infinite-query'
    | '/pagination'
    | '/use-mutation'
    | '/use-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cache-stale-time'
    | '/clean-architecture'
    | '/infinite-query'
    | '/pagination'
    | '/use-mutation'
    | '/use-query'
  id:
    | '__root__'
    | '/'
    | '/cache-stale-time'
    | '/clean-architecture'
    | '/infinite-query'
    | '/pagination'
    | '/use-mutation'
    | '/use-query'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CacheStaleTimeRoute: typeof CacheStaleTimeRoute
  CleanArchitectureRoute: typeof CleanArchitectureRoute
  InfiniteQueryRoute: typeof InfiniteQueryRoute
  PaginationRoute: typeof PaginationRoute
  UseMutationRoute: typeof UseMutationRoute
  UseQueryRoute: typeof UseQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/use-query': {
      id: '/use-query'
      path: '/use-query'
      fullPath: '/use-query'
      preLoaderRoute: typeof UseQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/use-mutation': {
      id: '/use-mutation'
      path: '/use-mutation'
      fullPath: '/use-mutation'
      preLoaderRoute: typeof UseMutationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pagination': {
      id: '/pagination'
      path: '/pagination'
      fullPath: '/pagination'
      preLoaderRoute: typeof PaginationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/infinite-query': {
      id: '/infinite-query'
      path: '/infinite-query'
      fullPath: '/infinite-query'
      preLoaderRoute: typeof InfiniteQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clean-architecture': {
      id: '/clean-architecture'
      path: '/clean-architecture'
      fullPath: '/clean-architecture'
      preLoaderRoute: typeof CleanArchitectureRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cache-stale-time': {
      id: '/cache-stale-time'
      path: '/cache-stale-time'
      fullPath: '/cache-stale-time'
      preLoaderRoute: typeof CacheStaleTimeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CacheStaleTimeRoute: CacheStaleTimeRoute,
  CleanArchitectureRoute: CleanArchitectureRoute,
  InfiniteQueryRoute: InfiniteQueryRoute,
  PaginationRoute: PaginationRoute,
  UseMutationRoute: UseMutationRoute,
  UseQueryRoute: UseQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
